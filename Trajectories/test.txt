
package org.firstinspires.ftc.teamcode.robotcore.opmode.auto;

import android.util.Pair;

import com.arcrobotics.ftclib.command.CommandOpMode;
import com.arcrobotics.ftclib.command.CommandScheduler;
import com.arcrobotics.ftclib.controller.PIDController;
import com.arcrobotics.ftclib.controller.wpilibcontroller.ProfiledPIDController;
import com.arcrobotics.ftclib.geometry.Pose2d;
import com.arcrobotics.ftclib.geometry.Rotation2d;
import com.arcrobotics.ftclib.geometry.Translation2d;
import com.arcrobotics.ftclib.trajectory.Trajectory;
import com.arcrobotics.ftclib.trajectory.TrajectoryConfig;
import com.arcrobotics.ftclib.trajectory.TrapezoidProfile;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;

import org.firstinspires.ftc.teamcode.math.controller.HolonomicDriveController;
import org.firstinspires.ftc.teamcode.math.trajectory.TrajectorySegment;
import org.firstinspires.ftc.teamcode.math.trajectory.TrajectorySequence;
import org.firstinspires.ftc.teamcode.robotcore.command.chassis.FollowTrajectory;
import org.firstinspires.ftc.teamcode.robotcore.hardware.subsystem.BlinkinSubsystem;
import org.firstinspires.ftc.teamcode.robotcore.hardware.subsystem.CameraSubsystem;
import org.firstinspires.ftc.teamcode.robotcore.hardware.subsystem.ChassisSubsystem;
import org.firstinspires.ftc.teamcode.robotcore.hardware.subsystem.SlideSubsystem;
import org.firstinspires.ftc.teamcode.robotcore.hardware.subsystem.SpatulaSubsystem;

import java.util.ArrayList;
import java.util.Arrays;

@Autonomous
public class test extends CommandOpMode {
    public static double xkP = 7;
    public static double xkI = 0.015;
    public static double xkD = 0.04;

    public static double ykP = 7;
    public static double ykI = 0.015;
    public static double ykD = 0.05;

    public static double tkP = 3;
    public static double tkI = 1.0;
    public static double tkD = 0.001;

    public static int VEL = 30;
    public static int ACCEL = 30;
    public static double RUNTIME_TOLERANCE_PCT = .7;

    private final TrajectoryConfig trajectoryConfig = new TrajectoryConfig(VEL, ACCEL);

    @Override
    public void initialize() {

        ChasarsisSubsystem chassisSubsystem = new ChassisSubsystem(hardwareMap);
        
        // Setup trajectories

        HolonomicDriveController controller = new HolonomicDriveController(
                new Pose2d(1, 1, Rotation2d.fromDegrees(3)),
                new PIDController(xkP, xkI, xkD),
                new PIDController(ykP, ykI, ykD),
                new ProfiledPIDController(
                        tkP, tkI, tkD, new TrapezoidProfile.Constraints(10000, 10000)
                )
        );

        ArrayList<TrajectoryConfig> trajectoryConfigs = new ArrayList<>(Arrays.asList(
        	new TrajectoryConfig(VEL, ACCEL),
        	new TrajectoryConfig(VEL, ACCEL)
	    ));
        trajectoryConfigs.get(0).setStartVelocity(0.0);
        trajectoryConfigs.get(0).setEndVelocity(19.994751311281668);
	
        trajectoryConfigs.get(1).setStartVelocity(19.994751311281668);
        trajectoryConfigs.get(1).setEndVelocity(12.724255891799725);
	
        ArrayList<Pair<Trajectory, Rotation2d>> trajectorySequence = TrajectorySequence.weaveTrajectorySequence(
            new TrajectorySegment[]{
                new TrajectorySegment(
                    Rotation2d.fromDegrees(0.0),
                    new Translation2d[0],
                    new Pose2d(66.168, -4.032, Rotation2d.fromDegrees(78.36636600105956)),
                    Rotation2d.fromDegrees(0),
                    trajectoryConfigs.get(0)
                ),
                new TrajectorySegment(
                    Rotation2d.fromDegrees(78.36636600105956),
                    new Translation2d[0],
                    new Pose2d(99.0, 21.6, Rotation2d.fromDegrees(5.194428907734805)),
                    Rotation2d.fromDegrees(0),
                    trajectoryConfigs.get(1)
                )
            }
        );
        CommandScheduler.getInstance().schedule(
            new FollowTrajectory(
                chassisSubsystem, controller, trajectorySequence.get(0) ,RUNTIME_TOLERANCE_PCT
            ),
            new FollowTrajectory(
                chassisSubsystem, controller, trajectorySequence.get(1) ,RUNTIME_TOLERANCE_PCT
            )
        );
    }
}
// Import Code: 281.25n511n625na0n68n4nb207n193n282nc0n14n44nd0n0n0ne
