
@Autonomous
public class test extends CommandOpMode {
    public static double xkP = 7;
    public static double xkI = 0.015;
    public static double xkD = 0.04;

    public static double ykP = 7;
    public static double ykI = 0.015;
    public static double ykD = 0.05;

    public static double tkP = 3;
    public static double tkI = 1.0;
    public static double tkD = 0.001;

    public static int VEL = 30;
    public static int ACCEL = 30;
    public static double RUNTIME_TOLERANCE_PCT = .7;

    private final TrajectoryConfig trajectoryConfig = new TrajectoryConfig(VEL, ACCEL);

    @Override
    public void initialize() {

        ChasarsisSubsystem chassisSubsystem = new ChassisSubsystem(hardwareMap);
        CameraSubsystem cameraSubsystem   = new CameraSubsystem(hardwareMap);
        BlinkinSubsystem blinkinSubsystem = new BlinkinSubsystem(hardwareMap);
        SpatulaSubsystem spatulaSubsystem = new SpatulaSubsystem(hardwareMap);
        SlideSubsystem slideSubsystem     = new SlideSubsystem(hardwareMap);

        // Setup trajectories

        HolonomicDriveController controller = new HolonomicDriveController(
                new Pose2d(1, 1, Rotation2d.fromDegrees(3)),
                new PIDController(xkP, xkI, xkD),
                new PIDController(ykP, ykI, ykD),
                new ProfiledPIDController(
                        tkP, tkI, tkD, new TrapezoidProfile.Constraints(10000, 10000)
                )
        );

        ArrayList<TrajectoryConfig> trajectoryConfigs = new ArrayList<>(Arrays.asList(
        	new TrajectoryConfig(VEL, ACCEL),
        	new TrajectoryConfig(VEL, ACCEL)
	    ))
        trajectoryConfig.get(0).setStartVelocity(0.0);
        trajectoryConfig.get(0).setEndVelocity(20.569330178690798);
	
        trajectoryConfig.get(1).setStartVelocity(20.569330178690798);
        trajectoryConfig.get(1).setEndVelocity(18.440997803806603);
	
        ArrayList<Pair<Trajectory, Rotation2d>> trajectorySequence = TrajectorySequence.weaveTrajectorySequence(
            new TrajectorySegment(
                Rotation2d.fromDegrees(0.0),
                new Translation2d[0],
                new Pose2d(45.72, -4.608, Rotation2d.fromDegrees(-44.432733590142064)),
                Rotation2d.fromDegrees(0),
                trajectoryConfig.get(0)
            ),
            new TrajectorySegment(
                Rotation2d.fromDegrees(-44.432733590142064),
                new Translation2d[0],
                new Pose2d(85.752, -9.792, Rotation2d.fromDegrees(51.34019174590991)),
                Rotation2d.fromDegrees(0),
                trajectoryConfig.get(1)
            )
        )
        CommandScheduler.getInstance().schedule(
            new FollowTrajectory(
                chassisSubsystem, controller, trajectorySequence.get(0) ,RUNTIME_TOLERANCE_PCT
            ),
            new FollowTrajectory(
                chassisSubsystem, controller, trajectorySequence.get(1) ,RUNTIME_TOLERANCE_PCT
            )
        );
    }
}